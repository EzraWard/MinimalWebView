// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable CS1591,CS1573,CS0465,CS0649,CS8019,CS1570,CS1584,CS1658
namespace Windows.Win32
{
	using global::System;
	using global::System.Diagnostics;
	using global::System.Runtime.CompilerServices;
	using global::System.Runtime.InteropServices;
	using global::System.Runtime.Versioning;
	using win32 = global::Windows.Win32;


		/// <content>
		/// Contains extern methods from "User32.dll".
		/// </content>
	internal static partial class PInvoke
	{
		/// <summary>Destroys an icon and frees any memory the icon occupied.</summary>
		/// <param name="hIcon">
		 /// <para>Type: <b>HICON</b> A handle to the icon to be destroyed. The icon must not be in use.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyicon#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		 /// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyicon">Learn more about this API from docs.microsoft.com.</see></para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true,SetLastError = true)]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern win32.Foundation.BOOL DestroyIcon(win32.UI.WindowsAndMessaging.HICON hIcon);

		/// <summary>Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared cursor.</summary>
		/// <param name="hCursor">
		 /// <para>Type: <b>HCURSOR</b> A handle to the cursor to be destroyed. The cursor must not be in use.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroycursor#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		 /// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroycursor">Learn more about this API from docs.microsoft.com.</see></para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true,SetLastError = true)]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern win32.Foundation.BOOL DestroyCursor(win32.UI.WindowsAndMessaging.HCURSOR hCursor);

		/// <summary>Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.</summary>
		/// <param name="lpWndClass">
		 /// <para>Type: <b>const WNDCLASS*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-wndclassa">WNDCLASS</a> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerclassw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		 /// <para>Type: <b>ATOM</b> If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <a href="/windows/desktop/api/winuser/nf-winuser-createwindowa">CreateWindow</a>, <a href="/windows/desktop/api/winuser/nf-winuser-createwindowexa">CreateWindowEx</a>, <a href="/windows/desktop/api/winuser/nf-winuser-getclassinfoa">GetClassInfo</a>, <a href="/windows/desktop/api/winuser/nf-winuser-getclassinfoexa">GetClassInfoEx</a>, <a href="/windows/desktop/api/winuser/nf-winuser-findwindowa">FindWindow</a>, <a href="/windows/desktop/api/winuser/nf-winuser-findwindowexa">FindWindowEx</a>, and <a href="/windows/desktop/api/winuser/nf-winuser-unregisterclassa">UnregisterClass</a> functions and the <b>IActiveIMMap::FilterClientWindows</b> method. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerclassw">Learn more about this API from docs.microsoft.com.</see></para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true,EntryPoint = "RegisterClassW",SetLastError = true)]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern ushort RegisterClass(in win32.UI.WindowsAndMessaging.WNDCLASSW lpWndClass);

		/// <summary>Destroys the specified menu and frees any memory that the menu occupies.</summary>
		/// <param name="hMenu">
		 /// <para>Type: <b>HMENU</b> A handle to the menu to be destroyed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroymenu#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		 /// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroymenu">Learn more about this API from docs.microsoft.com.</see></para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true,SetLastError = true)]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern win32.Foundation.BOOL DestroyMenu(win32.UI.WindowsAndMessaging.HMENU hMenu);

		/// <inheritdoc cref= "CreateWindowEx(win32.UI.WindowsAndMessaging.WINDOW_EX_STYLE , win32.Foundation.PCWSTR , win32.Foundation.PCWSTR , win32.UI.WindowsAndMessaging.WINDOW_STYLE , int , int , int , int , win32.Foundation.HWND , win32.UI.WindowsAndMessaging.HMENU , win32.Foundation.HINSTANCE , void* )"/>
		[SupportedOSPlatform("windows5.0")]internal static unsafe win32.Foundation.HWND CreateWindowEx(win32.UI.WindowsAndMessaging.WINDOW_EX_STYLE dwExStyle, string lpClassName, string lpWindowName, win32.UI.WindowsAndMessaging.WINDOW_STYLE dwStyle, int X, int Y, int nWidth, int nHeight, win32.Foundation.HWND hWndParent, SafeHandle hMenu, SafeHandle hInstance, void* lpParam)
		{
bool hMenuAddRef = false;
bool hInstanceAddRef = false;
try

			{
				fixed (char* lpWindowNameLocal = lpWindowName)

					{
						fixed (char* lpClassNameLocal = lpClassName)

							{
win32.UI.WindowsAndMessaging.HMENU hMenuLocal;
if (hMenu is object)
								{
hMenu.DangerousAddRef(ref hMenuAddRef);
hMenuLocal= (win32.UI.WindowsAndMessaging.HMENU )hMenu.DangerousGetHandle();
								}
else
hMenuLocal= default(win32.UI.WindowsAndMessaging.HMENU );
win32.Foundation.HINSTANCE hInstanceLocal;
if (hInstance is object)
								{
hInstance.DangerousAddRef(ref hInstanceAddRef);
hInstanceLocal= (win32.Foundation.HINSTANCE )hInstance.DangerousGetHandle();
								}
else
hInstanceLocal= default(win32.Foundation.HINSTANCE );
win32.Foundation.HWND __result = PInvoke.CreateWindowEx(dwExStyle, lpClassNameLocal, lpWindowNameLocal, dwStyle, X, Y, nWidth, nHeight, hWndParent, hMenuLocal, hInstanceLocal, lpParam);
								return __result;
							}
					}
			}
finally

			{
if (hMenuAddRef)hMenu.DangerousRelease();
if (hInstanceAddRef)hInstance.DangerousRelease();
			}
		}

		/// <summary>Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function.</summary>
		/// <param name="dwExStyle">
		 /// <para>Type: <b>DWORD</b> The extended window style of the window being created. For a list of possible values, see  <a href="https://docs.microsoft.com/windows/desktop/winmsg/extended-window-styles">Extended Window Styles</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpClassName">
		 /// <para>Type: <b>LPCTSTR</b> A <b>null</b>-terminated string or a class atom created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-window-classes">system class</a> names.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpWindowName">
		 /// <para>Type: <b>LPCTSTR</b> The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowa">CreateWindow</a> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwStyle">
		 /// <para>Type: <b>DWORD</b> The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="X">
		 /// <para>Type: <b>int</b> The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If <i>x</i> is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Y">
		 /// <para>Type: <b>int</b> The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
		/// <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-showwindow">ShowWindow</a> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nWidth">
		 /// <para>Type: <b>int</b> The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, the <i>nWidth</i> and <i>nHeight</i> parameter are set to zero.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nHeight">
		 /// <para>Type: <b>int</b> The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If the <i>nWidth</i> parameter is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWndParent">
		 /// <para>Type: <b>HWND</b> A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows. To create a <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hMenu">
		 /// <para>Type: <b>HMENU</b> A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hInstance">
		 /// <para>Type: <b>HINSTANCE</b> A handle to the instance of the module to be associated with the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpParam">
		 /// <para>Type: <b>LPVOID</b> Pointer to a value to be passed to the window through the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-createstructa">CREATESTRUCT</a> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <b>WM_CREATE</b> message.  This message is sent to the created window by this function before it returns. If an application calls <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowa">CreateWindow</a> to create a MDI client window, <i>lpParam</i> should point to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-clientcreatestruct">CLIENTCREATESTRUCT</a> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-mdicreatestructa">MDICREATESTRUCT</a> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		 /// <para>Type: <b>HWND</b> If the function succeeds, the return value is a handle to the new window. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. This function typically fails for one of the following reasons: </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw">Learn more about this API from docs.microsoft.com.</see></para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true,EntryPoint = "CreateWindowExW",SetLastError = true)]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern unsafe win32.Foundation.HWND CreateWindowEx(win32.UI.WindowsAndMessaging.WINDOW_EX_STYLE dwExStyle, win32.Foundation.PCWSTR lpClassName, win32.Foundation.PCWSTR lpWindowName, win32.UI.WindowsAndMessaging.WINDOW_STYLE dwStyle, int X, int Y, int nWidth, int nHeight, win32.Foundation.HWND hWndParent, win32.UI.WindowsAndMessaging.HMENU hMenu, win32.Foundation.HINSTANCE hInstance, [Optional()]void* lpParam);

		/// <summary>Sets the specified window's show state.</summary>
		/// <param name="hWnd">
		 /// <para>Type: <b>HWND</b> A handle to the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showwindow#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="nCmdShow">Type: <b>int</b></param>
		/// <returns>
		 /// <para>Type: <b>BOOL</b> If the window was previously visible, the return value is nonzero. If the window was previously hidden, the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showwindow">Learn more about this API from docs.microsoft.com.</see></para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true)]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern bool ShowWindow(win32.Foundation.HWND hWnd, win32.UI.WindowsAndMessaging.SHOW_WINDOW_CMD nCmdShow);

		/// <inheritdoc cref= "GetMessage(win32.UI.WindowsAndMessaging.MSG* , win32.Foundation.HWND , uint , uint )"/>
		[SupportedOSPlatform("windows5.0")]internal static unsafe bool GetMessage(out win32.UI.WindowsAndMessaging.MSG lpMsg, win32.Foundation.HWND hWnd, uint wMsgFilterMin, uint wMsgFilterMax)
		{
			fixed (win32.UI.WindowsAndMessaging.MSG* lpMsgLocal = &lpMsg)

				{
bool __result = PInvoke.GetMessage(lpMsgLocal, hWnd, wMsgFilterMin, wMsgFilterMax);
					return __result;
				}
		}

		/// <summary>Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.</summary>
		/// <param name="lpMsg">
		 /// <para>Type: <b>LPMSG</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure that receives message information from the thread's message queue.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hWnd">
		 /// <para>Type: <b>HWND</b> A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
		/// <para>If <i>hWnd</i> is <b>NULL</b>, <b>GetMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed. If <i>hWnd</i> is -1, <b>GetMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>,  that is, thread messages as posted by  <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-postmessagea">PostMessage</a> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-postthreadmessagea">PostThreadMessage</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wMsgFilterMin">
		 /// <para>Type: <b>UINT</b> The integer value of the lowest message value to be retrieved. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message. Use <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMax</i> to specify only the <b>WM_INPUT</b> messages. If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wMsgFilterMax">
		 /// <para>Type: <b>UINT</b> The integer value of the highest message value to be retrieved. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
		/// <para>Use <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMin</i> to specify only the <b>WM_INPUT</b> messages. If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		 /// <para>Type: <b>BOOL</b> If the function retrieves a message other than <a href="/windows/desktop/winmsg/wm-quit">WM_QUIT</a>, the return value is nonzero. If the function retrieves the <a href="/windows/desktop/winmsg/wm-quit">WM_QUIT</a> message, the return value is zero. If there is an error, the return value is -1. For example, the function fails if <i>hWnd</i> is an invalid window handle or <i>lpMsg</i> is an invalid pointer. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. Because the return value can be nonzero, zero, or -1, avoid code like this:</para>
		/// <para></para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew">Learn more about this API from docs.microsoft.com.</see></para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true,EntryPoint = "GetMessageW",SetLastError = true)]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern unsafe bool GetMessage(win32.UI.WindowsAndMessaging.MSG* lpMsg, win32.Foundation.HWND hWnd, uint wMsgFilterMin, uint wMsgFilterMax);

		/// <summary>Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.</summary>
		/// <param name="hWnd">
		 /// <para>Type: <b>HWND</b> A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows. Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		 /// <para>Type: <b>UINT</b> The message to be sent. For lists of the system-provided messages, see <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		 /// <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		 /// <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		 /// <para>Type: <b>LRESULT</b> The return value specifies the result of the message processing; it depends on the message sent.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendmessagew">Learn more about this API from docs.microsoft.com.</see></para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true,EntryPoint = "SendMessageW",SetLastError = true)]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern win32.Foundation.LRESULT SendMessage(win32.Foundation.HWND hWnd, uint Msg, win32.Foundation.WPARAM wParam, win32.Foundation.LPARAM lParam);

		/// <summary>Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.</summary>
		/// <param name="hWnd">
		 /// <para>Type: <b>HWND</b> A handle to the window whose window procedure is to receive the message. The following values have special meanings. </para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		 /// <para>Type: <b>UINT</b> The message to be posted. For lists of the system-provided messages, see <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		 /// <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		 /// <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		 /// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. <b>GetLastError</b> returns <b>ERROR_NOT_ENOUGH_QUOTA</b> when the limit is hit.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postmessagew">Learn more about this API from docs.microsoft.com.</see></para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true,EntryPoint = "PostMessageW",SetLastError = true)]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern bool PostMessage(win32.Foundation.HWND hWnd, uint Msg, win32.Foundation.WPARAM wParam, win32.Foundation.LPARAM lParam);

		/// <inheritdoc cref= "DispatchMessage(win32.UI.WindowsAndMessaging.MSG* )"/>
		[SupportedOSPlatform("windows5.0")]internal static unsafe win32.Foundation.LRESULT DispatchMessage(in win32.UI.WindowsAndMessaging.MSG lpMsg)
		{
			fixed (win32.UI.WindowsAndMessaging.MSG* lpMsgLocal = &lpMsg)

				{
win32.Foundation.LRESULT __result = PInvoke.DispatchMessage(lpMsgLocal);
					return __result;
				}
		}

		/// <summary>Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function.</summary>
		/// <param name="lpMsg">
		 /// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a>*</b> A pointer to a structure that contains the message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dispatchmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		 /// <para>Type: <b>LRESULT</b> The return value specifies the value returned by the window procedure. Although its meaning depends on the message being dispatched, the return value generally is ignored.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dispatchmessagew">Learn more about this API from docs.microsoft.com.</see></para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true,EntryPoint = "DispatchMessageW")]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern unsafe win32.Foundation.LRESULT DispatchMessage(win32.UI.WindowsAndMessaging.MSG* lpMsg);

		/// <inheritdoc cref= "TranslateMessage(win32.UI.WindowsAndMessaging.MSG* )"/>
		[SupportedOSPlatform("windows5.0")]internal static unsafe bool TranslateMessage(in win32.UI.WindowsAndMessaging.MSG lpMsg)
		{
			fixed (win32.UI.WindowsAndMessaging.MSG* lpMsgLocal = &lpMsg)

				{
bool __result = PInvoke.TranslateMessage(lpMsgLocal);
					return __result;
				}
		}

		/// <summary>Translates virtual-key messages into character messages. The character messages are posted to the calling thread's message queue, to be read the next time the thread calls the GetMessage or PeekMessage function.</summary>
		/// <param name="lpMsg">
		 /// <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure that contains message information retrieved from the calling thread's message queue by using the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmessage">GetMessage</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-peekmessagea">PeekMessage</a> function.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-translatemessage#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		 /// <para>Type: <b>BOOL</b> If the message is translated (that is, a character message is posted to the thread's message queue), the return value is nonzero. If the message is <a href="/windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>, <a href="/windows/desktop/inputdev/wm-keyup">WM_KEYUP</a>, <a href="/windows/desktop/inputdev/wm-syskeydown">WM_SYSKEYDOWN</a>, or <a href="/windows/desktop/inputdev/wm-syskeyup">WM_SYSKEYUP</a>, the return value is nonzero, regardless of the translation. If the message is not translated (that is, a character message is not posted to the thread's message queue), the return value is zero.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-translatemessage">Learn more about this API from docs.microsoft.com.</see></para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true)]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern unsafe bool TranslateMessage(win32.UI.WindowsAndMessaging.MSG* lpMsg);

		/// <summary>Calls the default window procedure to provide default processing for any window messages that an application does not process.</summary>
		/// <param name="hWnd">
		 /// <para>Type: <b>HWND</b> A handle to the window procedure that received the message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="Msg">
		 /// <para>Type: <b>UINT</b> The message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="wParam">
		 /// <para>Type: <b>WPARAM</b> Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lParam">
		 /// <para>Type: <b>LPARAM</b> Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		 /// <para>Type: <b>LRESULT</b> The return value is the result of the message processing and depends on the message.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw">Learn more about this API from docs.microsoft.com.</see></para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true,EntryPoint = "DefWindowProcW")]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern win32.Foundation.LRESULT DefWindowProc(win32.Foundation.HWND hWnd, uint Msg, win32.Foundation.WPARAM wParam, win32.Foundation.LPARAM lParam);

		/// <summary>Indicates to the system that a thread has made a request to terminate (quit). It is typically used in response to a WM_DESTROY message.</summary>
		/// <param name="nExitCode">
		 /// <para>Type: <b>int</b> The application exit code. This value is used as the <i>wParam</i> parameter of the <a href="https://docs.microsoft.com/windows/desktop/winmsg/wm-quit">WM_QUIT</a> message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postquitmessage#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <remarks>
		/// <para>The <b>PostQuitMessage</b> function posts a <a href="https://docs.microsoft.com/windows/desktop/winmsg/wm-quit">WM_QUIT</a> message to the thread's message queue and returns immediately; the function simply indicates to the system that the thread is requesting to quit at some time in the future. When the thread retrieves the <a href="https://docs.microsoft.com/windows/desktop/winmsg/wm-quit">WM_QUIT</a> message from its message queue, it should exit its message loop and return control to the system. The exit value returned to the system must be the <i>wParam</i> parameter of the <b>WM_QUIT</b> message.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postquitmessage#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true)]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern void PostQuitMessage(int nExitCode);

		/// <inheritdoc cref= "GetClientRect(win32.Foundation.HWND , win32.Foundation.RECT* )"/>
		[SupportedOSPlatform("windows5.0")]internal static unsafe bool GetClientRect(win32.Foundation.HWND hWnd, out win32.Foundation.RECT lpRect)
		{
			fixed (win32.Foundation.RECT* lpRectLocal = &lpRect)

				{
bool __result = PInvoke.GetClientRect(hWnd, lpRectLocal);
					return __result;
				}
		}

		/// <summary>Retrieves the coordinates of a window's client area.</summary>
		/// <param name="hWnd">
		 /// <para>Type: <b>HWND</b> A handle to the window whose client coordinates are to be retrieved.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclientrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="lpRect">
		 /// <para>Type: <b>LPRECT</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the client coordinates. The <b>left</b> and <b>top</b> members are zero. The <b>right</b> and <b>bottom</b> members contain the width and height of the window.</para>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclientrect#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		 /// <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
		/// </returns>
		/// <remarks>
		/// <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclientrect">Learn more about this API from docs.microsoft.com.</see></para>
		/// </remarks>
		[DllImport("User32", ExactSpelling = true,SetLastError = true)]
[DefaultDllImportSearchPaths(DllImportSearchPath.System32)][SupportedOSPlatform("windows5.0")]internal static extern unsafe bool GetClientRect(win32.Foundation.HWND hWnd, win32.Foundation.RECT* lpRect);
	}
}
